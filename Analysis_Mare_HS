
rm(list=ls(all=TRUE))

library("caret")
library("nnet")
library("xtable")

options(scipen=999)

data_mare <- readRDS("/Users/Ang/Desktop/Research/Counterfactual covariances/Data/data_cleaned_mare_hs.rds")
colSums(is.na(data_mare))

data_mare$gender <- as.numeric(data_mare$gender)-1

data_mare$parental_presence <- as.numeric(data_mare$parental_presence)-1

data_mare$n_sib <- as.numeric(data_mare$n_sib)-1

data_mare$urban <- as.numeric(data_mare$urban)-1

data_mare$edu_exp <- as.numeric(data_mare$edu_exp)-2
data_mare$edu_exp[data_mare$edu_exp==-1] <- 0

data_mare$age <- as.numeric(data_mare$age)-1

data_mare$friend_edu_exp <- as.numeric(data_mare$friend_edu_exp)-2
data_mare$friend_edu_exp[data_mare$friend_edu_exp==-1] <- 0

data_mare$sig_other_exp1 <- NA
data_mare$sig_other_exp1[data_mare$sig_other_expec==1 & !is.na(data_mare$sig_other_expec)] <- 1
data_mare$sig_other_exp1[data_mare$sig_other_expec!=1 & !is.na(data_mare$sig_other_expec)] <- 0
data_mare$sig_other_exp2 <- NA
data_mare$sig_other_exp2[data_mare$sig_other_expec==2 & !is.na(data_mare$sig_other_expec)] <- 1
data_mare$sig_other_exp2[data_mare$sig_other_expec!=2 & !is.na(data_mare$sig_other_expec)] <- 0
data_mare$sig_other_exp3 <- NA
data_mare$sig_other_exp3[data_mare$sig_other_expec==3 & !is.na(data_mare$sig_other_expec)] <- 1
data_mare$sig_other_exp3[data_mare$sig_other_expec!=3 & !is.na(data_mare$sig_other_expec)] <- 0
data_mare$sig_other_exp4 <- NA
data_mare$sig_other_exp4[data_mare$sig_other_expec==4 & !is.na(data_mare$sig_other_expec)] <- 1
data_mare$sig_other_exp4[data_mare$sig_other_expec!=4 & !is.na(data_mare$sig_other_expec)] <- 0

data_mare$foreign_lang <- as.numeric(data_mare$foreign_lang)-1

data_mare$SMSA1 <- NA
data_mare$SMSA1[data_mare$SMSA==0 & !is.na(data_mare$SMSA)] <- 1
data_mare$SMSA1[data_mare$SMSA!=0 & !is.na(data_mare$SMSA)] <- 0
data_mare$SMSA2 <- NA
data_mare$SMSA2[data_mare$SMSA==1 & !is.na(data_mare$SMSA)] <- 1
data_mare$SMSA2[data_mare$SMSA!=1 & !is.na(data_mare$SMSA)] <- 0
data_mare$SMSA3 <- NA
data_mare$SMSA3[data_mare$SMSA==2 & !is.na(data_mare$SMSA)] <- 1
data_mare$SMSA3[data_mare$SMSA!=2 & !is.na(data_mare$SMSA)] <- 0
data_mare$SMSA4 <- NA
data_mare$SMSA4[data_mare$SMSA==3 & !is.na(data_mare$SMSA)] <- 1
data_mare$SMSA4[data_mare$SMSA!=3 & !is.na(data_mare$SMSA)] <- 0

data_mare$foreign_lang <- as.numeric(data_mare$foreign_lang)-1

data_mare$mother_seperate <- as.numeric(data_mare$mother_seperate)-1

data_mare$school_satis1 <- NA
data_mare$school_satis1[(data_mare$school_satisfaction==1 | data_mare$school_satisfaction==2) & !is.na(data_mare$school_satisfaction)] <- 1
data_mare$school_satis1[data_mare$school_satisfaction!=1 & data_mare$school_satisfaction!=2 & !is.na(data_mare$school_satisfaction)] <- 0
data_mare$school_satis2 <- NA
data_mare$school_satis2[data_mare$school_satisfaction==3 & !is.na(data_mare$school_satisfaction)] <- 1
data_mare$school_satis2[data_mare$school_satisfaction!=3 & !is.na(data_mare$school_satisfaction)] <- 0
data_mare$school_satis3 <- NA
data_mare$school_satis3[data_mare$school_satisfaction==4 & !is.na(data_mare$school_satisfaction)] <- 1
data_mare$school_satis3[data_mare$school_satisfaction!=4 & !is.na(data_mare$school_satisfaction)] <- 0

data_mare$fm_foreign_born <- NA
data_mare$fm_foreign_born[(data_mare$f_foreign_born==2 | data_mare$m_foreign_born==2) & !is.na(data_mare$f_foreign_born) & !is.na(data_mare$m_foreign_born)] <- 1
data_mare$fm_foreign_born[(data_mare$f_foreign_born==1 | data_mare$m_foreign_born==1) & !is.na(data_mare$f_foreign_born) & !is.na(data_mare$m_foreign_born)] <- 0

data_mare$region1 <- NA
data_mare$region1[data_mare$region==1 & !is.na(data_mare$region)] <- 1
data_mare$region1[data_mare$region!=1 & !is.na(data_mare$region)] <- 0
data_mare$region2 <- NA
data_mare$region2[data_mare$region==2 & !is.na(data_mare$region)] <- 1
data_mare$region2[data_mare$region!=2 & !is.na(data_mare$region)] <- 0
data_mare$region3 <- NA
data_mare$region3[data_mare$region==3 & !is.na(data_mare$region)] <- 1
data_mare$region3[data_mare$region!=3 & !is.na(data_mare$region)] <- 0
data_mare$region4 <- NA
data_mare$region4[data_mare$region==4 & !is.na(data_mare$region)] <- 1
data_mare$region4[data_mare$region!=4 & !is.na(data_mare$region)] <- 0

data_mare$m_work <- as.numeric(data_mare$m_work)-1

data_mare$race1 <- NA
data_mare$race1[data_mare$race=="Other" & !is.na(data_mare$race)] <- 1
data_mare$race1[data_mare$race!="Other" & !is.na(data_mare$race)] <- 0
data_mare$race2 <- NA
data_mare$race2[data_mare$race=="Black" & !is.na(data_mare$race)] <- 1
data_mare$race2[data_mare$race!="Black" & !is.na(data_mare$race)] <- 0
data_mare$race3 <- NA
data_mare$race3[data_mare$race=="Hispanic" & !is.na(data_mare$race)] <- 1
data_mare$race3[data_mare$race!="Hispanic" & !is.na(data_mare$race)] <- 0

data_mare$attendance29 <- as.numeric(data_mare$attendance29)-1

data_mare <- na.omit(data_mare)

Y="attendance29"
D="HS20"
G="parental_income_log"
data=data_mare
algorithm="ranger"
t=0.01
Z <- c("parental_income_log","gender","medu","parental_presence",
       "n_sib","urban","edu_exp","AFQT","age","friend_edu_exp","rotter_score","rosenberg_irt_score",
       "sig_other_exp1","sig_other_exp2","sig_other_exp3","sig_other_exp4","foreign_lang",
       "SMSA1","SMSA2","SMSA3","SMSA4","mother_seperate",
       "school_satis1","school_satis2","school_satis3","fm_foreign_born",
       "region1","region2","region3","region4","m_work","race1","race2","race3")

table(data_mare$HS20, data_mare$attendance29)

#############################################################################################################################################


#############################################################################################################################################

set.seed(1)

data$id <- 1:nrow(data)

# estimate the nuisance functions using cross-fitting
sample1 <- sample(nrow(data), floor(nrow(data)/2), replace=F)
sample2 <- setdiff(1:nrow(data), sample1)

YgivenDZ.Pred_D1 <- DgivenZ.Pred <- rep(NA, nrow(data))

data[,Y] <- as.factor(data[,Y])
levels(data[,Y]) <- c("Y0","Y1")  # necessary for caret implementation of ranger

if (algorithm=="nnet") {
  message <- utils::capture.output( YgivenDZ.Model.sample1 <- caret::train(stats::as.formula(paste(Y, paste(D,paste(Z,collapse="+"),sep="+"), sep="~")), data=data[sample1,], method="nnet",
                                                                           preProc=c("center","scale"), trControl=caret::trainControl(method="none"), linout=FALSE,
                                                                           tuneGrid=expand.grid(size=2,decay=0.02)) )
  message <- utils::capture.output( YgivenDZ.Model.sample2 <- caret::train(stats::as.formula(paste(Y, paste(D,paste(Z,collapse="+"),sep="+"), sep="~")), data=data[sample2,], method="nnet",
                                                                           preProc=c("center","scale"), trControl=caret::trainControl(method="none"), linout=FALSE,
                                                                           tuneGrid=expand.grid(size=2,decay=0.02)) )
}
if (algorithm=="ranger") {
  message <- utils::capture.output( YgivenDZ.Model.sample1 <- caret::train(stats::as.formula(paste(Y, paste(D,paste(Z,collapse="+"),sep="+"), sep="~")), data=data[sample1,], method="ranger",
                                                                           trControl=caret::trainControl(method="cv", classProbs=TRUE),
                                                                           tuneGrid=expand.grid(mtry=floor(sqrt(length(Z))),splitrule="gini",min.node.size=c(1,10,100,200,400))) )
  message <- utils::capture.output( YgivenDZ.Model.sample2 <- caret::train(stats::as.formula(paste(Y, paste(D,paste(Z,collapse="+"),sep="+"), sep="~")), data=data[sample2,], method="ranger",
                                                                           trControl=caret::trainControl(method="cv", classProbs=TRUE),
                                                                           tuneGrid=expand.grid(mtry=floor(sqrt(length(Z))),splitrule="gini",min.node.size=c(1,10,100,200,400))) )
}
pred_data1 <- data
pred_data1[,colnames(pred_data1)%in%D] <- 1
YgivenDZ.Pred_D1[sample1] <- stats::predict(YgivenDZ.Model.sample2, newdata = pred_data1[sample1,], type="prob")[,2]
YgivenDZ.Pred_D1[sample2] <- stats::predict(YgivenDZ.Model.sample1, newdata = pred_data1[sample2,], type="prob")[,2]

data[,Y] <- as.numeric(data[,Y])-1


data[,D] <- as.factor(data[,D])
levels(data[,D]) <- c("D0","D1")  # necessary for caret implementation of ranger

if (algorithm=="nnet") {
  message <- utils::capture.output( DgivenZ.Model.sample1 <- caret::train(stats::as.formula(paste(D, paste(Z,collapse="+"), sep="~")), data=data[sample1,], method="nnet",
                                                                          preProc=c("center","scale"), trControl=caret::trainControl(method="none"), linout=FALSE,
                                                                          tuneGrid=expand.grid(size=2,decay=0.02)) )
  message <- utils::capture.output( DgivenZ.Model.sample2 <- caret::train(stats::as.formula(paste(D, paste(Z,collapse="+"), sep="~")), data=data[sample2,], method="nnet",
                                                                          preProc=c("center","scale"), trControl=caret::trainControl(method="none"), linout=FALSE,
                                                                          tuneGrid=expand.grid(size=2,decay=0.02)) )
}
if (algorithm=="ranger") {
  message <- utils::capture.output( DgivenZ.Model.sample1 <- caret::train(stats::as.formula(paste(D, paste(Z,collapse="+"), sep="~")), data=data[sample1,], method="ranger",
                                                                          trControl=caret::trainControl(method="cv", classProbs=TRUE),
                                                                          tuneGrid=expand.grid(mtry=floor(sqrt(length(Z))),splitrule="gini",min.node.size=c(1,10,100,200,400))) )
  message <- utils::capture.output( DgivenZ.Model.sample2 <- caret::train(stats::as.formula(paste(D, paste(Z,collapse="+"), sep="~")), data=data[sample2,], method="ranger",
                                                                          trControl=caret::trainControl(method="cv", classProbs=TRUE),
                                                                          tuneGrid=expand.grid(mtry=floor(sqrt(length(Z))),splitrule="gini",min.node.size=c(1,10,100,200,400))) )
}
DgivenZ.Pred[sample1] <- stats::predict(DgivenZ.Model.sample2, newdata=data[sample1,], type="prob")[,2]
DgivenZ.Pred[sample2] <- stats::predict(DgivenZ.Model.sample1, newdata=data[sample2,], type="prob")[,2]

data[,D] <- as.numeric(data[,D])-1


DgivenZ.Pred_c <- YgivenDZ.Pred_D1_c <- rep(NA, nrow(data))

DgivenZ.Pred_c[sample1] <- predict(DgivenZ.Model.sample1, newdata=data[sample1,], type="prob")[,2]
DgivenZ.Pred_c[sample2] <- predict(DgivenZ.Model.sample2, newdata=data[sample2,], type="prob")[,2]

YgivenDZ.Pred_D1_c[sample1] <- predict(YgivenDZ.Model.sample1, newdata = pred_data1[sample1,], type="prob")[,2]
YgivenDZ.Pred_D1_c[sample2] <- predict(YgivenDZ.Model.sample2, newdata = pred_data1[sample2,], type="prob")[,2]


### the descriptive estimand: cov(E(Y|D=1,G),G)
YgivenDZ.Pred_D1_desc <- DgivenZ.Pred_desc <- rep(NA, nrow(data))

data[,Y] <- as.factor(data[,Y])
levels(data[,Y]) <- c("Y0","Y1")  # necessary for caret implementation of ranger

if (algorithm=="nnet") {
  message <- utils::capture.output( YgivenDZ.Model.sample1_desc <- caret::train(stats::as.formula(paste(Y, paste(D,G,sep="+"), sep="~")), data=data[sample1,], method="nnet",
                                                                                preProc=c("center","scale"), trControl=caret::trainControl(method="none"), linout=TRUE,
                                                                                tuneGrid=expand.grid(size=2,decay=0.02)) )
  message <- utils::capture.output( YgivenDZ.Model.sample2_desc <- caret::train(stats::as.formula(paste(Y, paste(D,G,sep="+"), sep="~")), data=data[sample2,], method="nnet",
                                                                                preProc=c("center","scale"), trControl=caret::trainControl(method="none"), linout=TRUE,
                                                                                tuneGrid=expand.grid(size=2,decay=0.02)) )
}
if (algorithm=="ranger") {
  message <- utils::capture.output( YgivenDZ.Model.sample1_desc <- caret::train(stats::as.formula(paste(Y, paste(D,G,sep="+"), sep="~")), data=data[sample1,], method="ranger",
                                                                                trControl=caret::trainControl(method="cv", classProbs=TRUE),
                                                                                tuneGrid=expand.grid(mtry=1,splitrule="gini",min.node.size=c(1,10,100,200,400))) )
  message <- utils::capture.output( YgivenDZ.Model.sample2_desc <- caret::train(stats::as.formula(paste(Y, paste(D,G,sep="+"), sep="~")), data=data[sample2,], method="ranger",
                                                                                trControl=caret::trainControl(method="cv", classProbs=TRUE),
                                                                                tuneGrid=expand.grid(mtry=1,splitrule="gini",min.node.size=c(1,10,100,200,400))) )
}
YgivenDZ.Pred_D1_desc[sample1] <- stats::predict(YgivenDZ.Model.sample2_desc, newdata = pred_data1[sample1,], type="prob")[,2]
YgivenDZ.Pred_D1_desc[sample2] <- stats::predict(YgivenDZ.Model.sample1_desc, newdata = pred_data1[sample2,], type="prob")[,2]

data[,Y] <- as.numeric(data[,Y])-1

data[,D] <- as.factor(data[,D])
levels(data[,D]) <- c("D0","D1")  # necessary for caret implementation of ranger

if (algorithm=="nnet") {
  message <- utils::capture.output( DgivenZ.Model.sample1_desc <- caret::train(stats::as.formula(paste(D, G, sep="~")), data=data[sample1,], method="nnet",
                                                                               preProc=c("center","scale"), trControl=caret::trainControl(method="none"), linout=FALSE,
                                                                               tuneGrid=expand.grid(size=2,decay=0.02)) )
  message <- utils::capture.output( DgivenZ.Model.sample2_desc <- caret::train(stats::as.formula(paste(D, G, sep="~")), data=data[sample2,], method="nnet",
                                                                               preProc=c("center","scale"), trControl=caret::trainControl(method="none"), linout=FALSE,
                                                                               tuneGrid=expand.grid(size=2,decay=0.02)) )
}
if (algorithm=="ranger") {
  message <- utils::capture.output( DgivenZ.Model.sample1_desc <- caret::train(stats::as.formula(paste(D, G, sep="~")), data=data[sample1,], method="ranger",
                                                                               trControl=caret::trainControl(method="cv", classProbs=TRUE),
                                                                               tuneGrid=expand.grid(mtry=1,splitrule="gini",min.node.size=c(1,10,100,200,400))) )
  message <- utils::capture.output( DgivenZ.Model.sample2_desc <- caret::train(stats::as.formula(paste(D, G, sep="~")), data=data[sample2,], method="ranger",
                                                                               trControl=caret::trainControl(method="cv", classProbs=TRUE),
                                                                               tuneGrid=expand.grid(mtry=1,splitrule="gini",min.node.size=c(1,10,100,200,400))) )
}
DgivenZ.Pred_desc[sample1] <- stats::predict(DgivenZ.Model.sample2_desc, newdata=data[sample1,], type="prob")[,2]
DgivenZ.Pred_desc[sample2] <- stats::predict(DgivenZ.Model.sample1_desc, newdata=data[sample2,], type="prob")[,2]

data[,D] <- as.numeric(data[,D])-1

DgivenZ.Pred_desc_c <- YgivenDZ.Pred_D1_desc_c <- rep(NA, nrow(data))

DgivenZ.Pred_desc_c[sample1] <- predict(DgivenZ.Model.sample1_desc, newdata=data[sample1,], type="prob")[,2]
DgivenZ.Pred_desc_c[sample2] <- predict(DgivenZ.Model.sample2_desc, newdata=data[sample2,], type="prob")[,2]

YgivenDZ.Pred_D1_desc_c[sample1] <- predict(YgivenDZ.Model.sample1_desc, newdata = pred_data1[sample1,], type="prob")[,2]
YgivenDZ.Pred_D1_desc_c[sample2] <- predict(YgivenDZ.Model.sample2_desc, newdata = pred_data1[sample2,], type="prob")[,2]


## I have to truncate cases with extreme propensity scores, as exact 0's do happen 
retain <- DgivenZ.Pred>=t & DgivenZ.Pred<=1-t & DgivenZ.Pred_c>=t & DgivenZ.Pred_c<=1-t 
table(retain)
data <- data[retain,]
data$id2 <- 1:nrow(data)
sample1 <- data$id2[data$id %in% sample1]   # new sample1 index for the remaining sample (the rows that have been in sample1)
sample2 <- data$id2[data$id %in% sample2]

DgivenZ.Pred <- DgivenZ.Pred[retain]
DgivenZ.Pred_c <- DgivenZ.Pred_c[retain]
YgivenDZ.Pred_D1 <- YgivenDZ.Pred_D1[retain]
YgivenDZ.Pred_D1_c <- YgivenDZ.Pred_D1_c[retain]

DgivenZ.Pred_desc <- DgivenZ.Pred_desc[retain]
DgivenZ.Pred_desc_c <- DgivenZ.Pred_desc_c[retain]
YgivenDZ.Pred_D1_desc <- YgivenDZ.Pred_D1_desc[retain]
YgivenDZ.Pred_D1_desc_c <- YgivenDZ.Pred_D1_desc_c[retain]

# denominators for stabilizing weights
stab1 <- NA
stab1[sample1] <- mean((data[,D]/DgivenZ.Pred)[sample1])
stab1[sample2] <- mean((data[,D]/DgivenZ.Pred)[sample2])

stab1_s1_c <- mean((data[,D]/DgivenZ.Pred_c)[sample1])
stab1_s2_c <- mean((data[,D]/DgivenZ.Pred_c)[sample2])

E_YgivenDZ.Pred_D1 <- E_G <- E_D <- rep(NA, nrow(data))

E_YgivenDZ.Pred_D1[sample1] <- mean( ( (data[,D]/DgivenZ.Pred_c)/stab1_s2_c*(data[,Y]-YgivenDZ.Pred_D1_c) + YgivenDZ.Pred_D1_c)[sample2] )
E_YgivenDZ.Pred_D1[sample2] <- mean( ( (data[,D]/DgivenZ.Pred_c)/stab1_s1_c*(data[,Y]-YgivenDZ.Pred_D1_c) + YgivenDZ.Pred_D1_c)[sample1] )

E_G[sample1] <- mean(data[sample2,G])
E_G[sample2] <- mean(data[sample1,G])
E_D[sample1] <- mean(data[sample2,D])
E_D[sample2] <- mean(data[sample1,D])

stab1_desc <- NA
stab1_desc[sample1] <- mean((data[,D]/DgivenZ.Pred_desc)[sample1])
stab1_desc[sample2] <- mean((data[,D]/DgivenZ.Pred_desc)[sample2])

stab1_desc_s1_c <- mean((data[,D]/DgivenZ.Pred_desc_c)[sample1])
stab1_desc_s2_c <- mean((data[,D]/DgivenZ.Pred_desc_c)[sample2])

E_YgivenDZ.Pred_D1_desc <- rep(NA, nrow(data))

E_YgivenDZ.Pred_D1_desc[sample1] <- mean( ( (data[,D]/DgivenZ.Pred_desc_c)/stab1_desc_s2_c*(data[,Y]-YgivenDZ.Pred_D1_c) + YgivenDZ.Pred_D1_c)[sample2] )
E_YgivenDZ.Pred_D1_desc[sample2] <- mean( ( (data[,D]/DgivenZ.Pred_desc_c)/stab1_desc_s1_c*(data[,Y]-YgivenDZ.Pred_D1_c) + YgivenDZ.Pred_D1_c)[sample1] )

# decentered EIFs
eif_d1 <- ( (data[,D]/DgivenZ.Pred)/stab1*(data[,Y]-YgivenDZ.Pred_D1) + YgivenDZ.Pred_D1-E_YgivenDZ.Pred_D1 )*( data[,G]-E_G )
eif_DG <- data[,D]*data[,G]-data[,D]*E_G+E_D*E_G-data[,G]*E_D    

cov_d1 <-  mean(eif_d1)
cov_DG <- mean(eif_DG)      # For comparison, this is the un-cross-fitted version: mean(data[,D]*data[,G])-mean(data[,D])*mean(data[,G])
cov_d1_DG_diff <- cov_d1-cov_DG  

cov_d1_sd <- sqrt( (1/nrow(data)) * mean((eif_d1-cov_d1)^2) )
cov_DG_sd <- sqrt( (1/nrow(data)) * mean((eif_DG-cov_DG)^2) )
cov_d1_DG_diff_sd <- sqrt((1/nrow(data)) * mean((eif_d1-eif_DG-cov_d1_DG_diff)^2)) 

score1 <- (data[,D]/DgivenZ.Pred)/stab1*(data[,Y]-YgivenDZ.Pred_D1) + YgivenDZ.Pred_D1

eif_d1_desc <- ( (data[,D]/DgivenZ.Pred_desc)/stab1_desc*(data[,Y]-YgivenDZ.Pred_D1_desc) + YgivenDZ.Pred_D1_desc-E_YgivenDZ.Pred_D1_desc )*( data[,G]-E_G )

cov_d1_desc <-  mean(eif_d1_desc)   
cov_d1_desc_DG_diff <- cov_d1_desc-cov_DG  

cov_d1_sd_desc <- sqrt( (1/nrow(data)) * mean((eif_d1_desc-cov_d1_desc)^2) )
cov_d1_desc_DG_diff_sd <- sqrt((1/nrow(data)) * mean((eif_d1-eif_DG-cov_d1_desc_DG_diff)^2)) 

score1_desc <- (data[,D]/DgivenZ.Pred_desc)/stab1_desc*(data[,Y]-YgivenDZ.Pred_D1_desc) + YgivenDZ.Pred_D1_desc

detail <- data.frame(score1=score1, score1_desc=score1_desc, G=data[,G], Y=data[,Y], D=data[,D])

overall <- data.frame(item=c("cov_d1_desc","cov_d1","cov_DG","cov_d1_desc_DG_diff","cov_d1_DG_diff"),
                      point=c(cov_d1_desc,cov_d1,cov_DG,cov_d1_desc_DG_diff,cov_d1_DG_diff),
                      sd=c(cov_d1_sd_desc,cov_d1_sd,cov_DG_sd,cov_d1_desc_DG_diff_sd,cov_d1_DG_diff_sd))
overall$CI_lower <- overall$point - qnorm(0.975)*overall$sd 
overall$CI_higher <- overall$point + qnorm(0.975)*overall$sd 
overall$pvalues <- 1-abs(pnorm(overall$point/overall$sd)-0.5)*2

ggplot(detail, aes(x=G, y=Y)) +
  geom_smooth(data=detail, aes(x=G, y=score1_desc, color='desc1'), se=FALSE, span=1) +
  geom_smooth(data=detail, aes(x=G, y=score1, color='score1'), se=FALSE, span=1) + 
  geom_smooth(data=detail, aes(x=G, y=D, color='GD'), se=FALSE, span=1) + 
  scale_color_manual(breaks=c("desc1", "score1", "GD"),
                     values=c("desc1"="green", "score1"="purple", "GD"="red")) +
  theme(legend.title=element_blank()) 

overall



