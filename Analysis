
rm(list=ls(all=TRUE))

library("caret")
library("nnet")
library("xtable")

options(scipen=999)

#### First get a function the estimates the counterfactual covariances

concov <- function(Y,D,G,Z,data,algorithm,t) {
  data <- na.omit(data)
  
  # estimate the nuisance functions using cross-fitting
  sample1 <- sample(nrow(data), floor(nrow(data)/2), replace=F)
  sample2 <- setdiff(1:nrow(data), sample1)
  
  YgivenDZ.Pred_D0 <- YgivenDZ.Pred_D1 <- DgivenZ.Pred <- rep(NA, nrow(data))
  
  if (Y=="adult_income_rank" | Y=="adult_income_log") {
    if (algorithm=="nnet") {
      message <- utils::capture.output( YgivenDZ.Model.sample1 <- caret::train(stats::as.formula(paste(Y, paste(D,paste(Z,collapse="+"),sep="+"), sep="~")), data=data[sample1,], method="nnet",
                                                                               preProc=c("center","scale"), trControl=caret::trainControl(method="none"), linout=TRUE,
                                                                               tuneGrid=expand.grid(size=2,decay=0.02)) )
      message <- utils::capture.output( YgivenDZ.Model.sample2 <- caret::train(stats::as.formula(paste(Y, paste(D,paste(Z,collapse="+"),sep="+"), sep="~")), data=data[sample2,], method="nnet",
                                                                               preProc=c("center","scale"), trControl=caret::trainControl(method="none"), linout=TRUE,
                                                                               tuneGrid=expand.grid(size=2,decay=0.02)) )
    }
    if (algorithm=="ranger") {
      message <- utils::capture.output( YgivenDZ.Model.sample1 <- caret::train(stats::as.formula(paste(Y, paste(D,paste(Z,collapse="+"),sep="+"), sep="~")), data=data[sample1,], method="ranger",
                                                                               trControl=caret::trainControl(method="cv"),
                                                                               tuneGrid=expand.grid(mtry=floor(sqrt(length(Z))),splitrule="variance",min.node.size=c(5,10,100,200))) )
      message <- utils::capture.output( YgivenDZ.Model.sample2 <- caret::train(stats::as.formula(paste(Y, paste(D,paste(Z,collapse="+"),sep="+"), sep="~")), data=data[sample2,], method="ranger",
                                                                               trControl=caret::trainControl(method="cv"),
                                                                               tuneGrid=expand.grid(mtry=floor(sqrt(length(Z))),splitrule="variance",min.node.size=c(5,10,100,200))) )
    }
    pred_data0 <- data
    pred_data0[,colnames(pred_data0)%in%D] <- 0
    YgivenDZ.Pred_D0[sample1] <- stats::predict(YgivenDZ.Model.sample2, newdata = pred_data0[sample1,])
    YgivenDZ.Pred_D0[sample2] <- stats::predict(YgivenDZ.Model.sample1, newdata = pred_data0[sample2,])
    pred_data1 <- data
    pred_data1[,colnames(pred_data1)%in%D] <- 1
    YgivenDZ.Pred_D1[sample1] <- stats::predict(YgivenDZ.Model.sample2, newdata = pred_data1[sample1,])
    YgivenDZ.Pred_D1[sample2] <- stats::predict(YgivenDZ.Model.sample1, newdata = pred_data1[sample2,])
  }

  if (Y=="completion") {
    data[,Y] <- as.factor(data[,Y])
    levels(data[,Y]) <- c("Y0","Y1")  # necessary for caret implementation of ranger
    
    if (algorithm=="nnet") {
      message <- utils::capture.output( YgivenDZ.Model.sample1 <- caret::train(stats::as.formula(paste(Y, paste(D,paste(Z,collapse="+"),sep="+"), sep="~")), data=data[sample1,], method="nnet",
                                                                              preProc=c("center","scale"), trControl=caret::trainControl(method="none"), linout=FALSE,
                                                                              tuneGrid=expand.grid(size=2,decay=0.02)) )
      message <- utils::capture.output( YgivenDZ.Model.sample2 <- caret::train(stats::as.formula(paste(Y, paste(D,paste(Z,collapse="+"),sep="+"), sep="~")), data=data[sample2,], method="nnet",
                                                                              preProc=c("center","scale"), trControl=caret::trainControl(method="none"), linout=FALSE,
                                                                              tuneGrid=expand.grid(size=2,decay=0.02)) )
    }
    if (algorithm=="ranger") {
      message <- utils::capture.output( YgivenDZ.Model.sample1 <- caret::train(stats::as.formula(paste(Y, paste(D,paste(Z,collapse="+"),sep="+"), sep="~")), data=data[sample1,], method="ranger",
                                                                              trControl=caret::trainControl(method="cv", classProbs=TRUE),
                                                                              tuneGrid=expand.grid(mtry=floor(sqrt(length(Z))),splitrule="gini",min.node.size=c(1,100,200))) )
      message <- utils::capture.output( YgivenDZ.Model.sample2 <- caret::train(stats::as.formula(paste(Y, paste(D,paste(Z,collapse="+"),sep="+"), sep="~")), data=data[sample2,], method="ranger",
                                                                              trControl=caret::trainControl(method="cv", classProbs=TRUE),
                                                                              tuneGrid=expand.grid(mtry=floor(sqrt(length(Z))),splitrule="gini",min.node.size=c(1,100,200))) )
    }
    pred_data0 <- data
    pred_data0[,colnames(pred_data0)%in%D] <- 0
    YgivenDZ.Pred_D0[sample1] <- stats::predict(YgivenDZ.Model.sample2, newdata = pred_data0[sample1,], type="prob")[,2]
    YgivenDZ.Pred_D0[sample2] <- stats::predict(YgivenDZ.Model.sample1, newdata = pred_data0[sample2,], type="prob")[,2]
    pred_data1 <- data
    pred_data1[,colnames(pred_data1)%in%D] <- 1
    YgivenDZ.Pred_D1[sample1] <- stats::predict(YgivenDZ.Model.sample2, newdata = pred_data1[sample1,], type="prob")[,2]
    YgivenDZ.Pred_D1[sample2] <- stats::predict(YgivenDZ.Model.sample1, newdata = pred_data1[sample2,], type="prob")[,2]
    
    data[,Y] <- as.numeric(data[,Y])-1
  }

  
  data[,D] <- as.factor(data[,D])
  levels(data[,D]) <- c("D0","D1")  # necessary for caret implementation of ranger
  
  if (algorithm=="nnet") {
    message <- utils::capture.output( DgivenZ.Model.sample1 <- caret::train(stats::as.formula(paste(D, paste(Z,collapse="+"), sep="~")), data=data[sample1,], method="nnet",
                                                                            preProc=c("center","scale"), trControl=caret::trainControl(method="none"), linout=FALSE,
                                                                            tuneGrid=expand.grid(size=2,decay=0.02)) )
    message <- utils::capture.output( DgivenZ.Model.sample2 <- caret::train(stats::as.formula(paste(D, paste(Z,collapse="+"), sep="~")), data=data[sample2,], method="nnet",
                                                                            preProc=c("center","scale"), trControl=caret::trainControl(method="none"), linout=FALSE,
                                                                            tuneGrid=expand.grid(size=2,decay=0.02)) )
  }
  if (algorithm=="ranger") {
    message <- utils::capture.output( DgivenZ.Model.sample1 <- caret::train(stats::as.formula(paste(D, paste(Z,collapse="+"), sep="~")), data=data[sample1,], method="ranger",
                                                                            trControl=caret::trainControl(method="cv", classProbs=TRUE),
                                                                            tuneGrid=expand.grid(mtry=floor(sqrt(length(Z))),splitrule="gini",min.node.size=c(1,100,200))) )
    message <- utils::capture.output( DgivenZ.Model.sample2 <- caret::train(stats::as.formula(paste(D, paste(Z,collapse="+"), sep="~")), data=data[sample2,], method="ranger",
                                                                            trControl=caret::trainControl(method="cv", classProbs=TRUE),
                                                                            tuneGrid=expand.grid(mtry=floor(sqrt(length(Z))),splitrule="gini",min.node.size=c(1,100,200))) )
  }
  DgivenZ.Pred[sample1] <- stats::predict(DgivenZ.Model.sample2, newdata=data[sample1,], type="prob")[,2]
  DgivenZ.Pred[sample2] <- stats::predict(DgivenZ.Model.sample1, newdata=data[sample2,], type="prob")[,2]
  
  DgivenZ.Pred[DgivenZ.Pred<=quantile(DgivenZ.Pred, probs=t)] <- quantile(DgivenZ.Pred, probs=t)
  DgivenZ.Pred[DgivenZ.Pred>=quantile(DgivenZ.Pred, probs=1-t)] <- quantile(DgivenZ.Pred, probs=1-t)
  
  data[,D] <- as.numeric(data[,D])-1
  
  # the "constant" nuisances
  E_YgivenDZ.Pred_D0 <- E_YgivenDZ.Pred_D1 <- E_G <- E_D <- rep(NA, nrow(data))
  DgivenZ.Pred_c <- YgivenDZ.Pred_D0_c <- YgivenDZ.Pred_D1_c <- rep(NA, nrow(data))
  
  DgivenZ.Pred_c[sample1] <- predict(DgivenZ.Model.sample1, newdata=data[sample1,], type="prob")[,2]
  DgivenZ.Pred_c[sample2] <- predict(DgivenZ.Model.sample2, newdata=data[sample2,], type="prob")[,2]
  DgivenZ.Pred_c[DgivenZ.Pred_c<=quantile(DgivenZ.Pred_c, probs=t)] <- quantile(DgivenZ.Pred_c, probs=t)
  DgivenZ.Pred_c[DgivenZ.Pred>=quantile(DgivenZ.Pred_c, probs=1-t)] <- quantile(DgivenZ.Pred_c, probs=1-t)
  
  if (Y=="adult_income_rank" | Y=="adult_income_log") {
    YgivenDZ.Pred_D0_c[sample1] <- predict(YgivenDZ.Model.sample1, newdata = pred_data0[sample1,])
    YgivenDZ.Pred_D0_c[sample2] <- predict(YgivenDZ.Model.sample2, newdata = pred_data0[sample2,])
    YgivenDZ.Pred_D1_c[sample1] <- predict(YgivenDZ.Model.sample1, newdata = pred_data1[sample1,])
    YgivenDZ.Pred_D1_c[sample2] <- predict(YgivenDZ.Model.sample2, newdata = pred_data1[sample2,])
  }
  if (Y=="completion") {
    YgivenDZ.Pred_D0_c[sample1] <- predict(YgivenDZ.Model.sample1, newdata = pred_data0[sample1,], type="prob")[,2]
    YgivenDZ.Pred_D0_c[sample2] <- predict(YgivenDZ.Model.sample2, newdata = pred_data0[sample2,], type="prob")[,2]
    YgivenDZ.Pred_D1_c[sample1] <- predict(YgivenDZ.Model.sample1, newdata = pred_data1[sample1,], type="prob")[,2]
    YgivenDZ.Pred_D1_c[sample2] <- predict(YgivenDZ.Model.sample2, newdata = pred_data1[sample2,], type="prob")[,2]
  }
  
  E_YgivenDZ.Pred_D0[sample1] <- mean( ( ((1-data[,D])/(1-DgivenZ.Pred_c))*(data[,Y]-YgivenDZ.Pred_D0_c) + YgivenDZ.Pred_D0_c)[sample2] )
  E_YgivenDZ.Pred_D0[sample2] <- mean( ( ((1-data[,D])/(1-DgivenZ.Pred_c))*(data[,Y]-YgivenDZ.Pred_D0_c) + YgivenDZ.Pred_D0_c)[sample1] )
  E_YgivenDZ.Pred_D1[sample1] <- mean( ( (data[,D]/DgivenZ.Pred_c)*(data[,Y]-YgivenDZ.Pred_D1_c) + YgivenDZ.Pred_D1_c)[sample2] )
  E_YgivenDZ.Pred_D1[sample2] <- mean( ( (data[,D]/DgivenZ.Pred_c)*(data[,Y]-YgivenDZ.Pred_D1_c) + YgivenDZ.Pred_D1_c)[sample1] )

  E_G[sample1] <- mean(data[sample2,G])
  E_G[sample2] <- mean(data[sample1,G])
  E_D[sample1] <- mean(data[sample2,D])
  E_D[sample2] <- mean(data[sample1,D])
  
  # decentered EIFs
  eif_d1 <- ( (data[,D]/DgivenZ.Pred)*(data[,Y]-YgivenDZ.Pred_D1) + YgivenDZ.Pred_D1-E_YgivenDZ.Pred_D1 )*( data[,G]-E_G )
  eif_d0 <- ( ((1-data[,D])/(1-DgivenZ.Pred))*(data[,Y]-YgivenDZ.Pred_D0) + YgivenDZ.Pred_D0-E_YgivenDZ.Pred_D0 )*( data[,G]-E_G )
  eif_DG <- data[,D]*data[,G]-data[,D]*E_G+E_D*E_G-data[,G]*E_D    # For the Mare thesis
  
  cov_d1 <-  mean(eif_d1)      
  cov_d0 <-  mean(eif_d0)      
  cov_d1_d0_diff <- cov_d1-cov_d0
  cov_DG <- mean(eif_DG)  # For the Mare thesis     # For comparison, this is the un-cross-fitted version: mean(data[,D]*data[,G])-mean(data[,D])*mean(data[,G])
  cov_d1_DG_diff <- cov_d1-cov_DG  # For the Mare thesis
  
  cov_d1_sd <- sqrt( (1/nrow(data)) * mean((eif_d1-cov_d1)^2) )
  cov_d0_sd <- sqrt( (1/nrow(data)) * mean((eif_d0-cov_d0)^2) )
  cov_d1_d0_diff_sd <- sqrt((1/nrow(data)) * mean((eif_d1-eif_d0-cov_d1_d0_diff)^2)) 
  cov_DG_sd <- sqrt( (1/nrow(data)) * mean((eif_DG-cov_DG)^2) )
  cov_d1_DG_diff_sd <- sqrt((1/nrow(data)) * mean((eif_d1-eif_DG-cov_d1_DG_diff)^2)) 
  
  if (Y=="adult_income_rank" | Y=="adult_income_log") {
    results <- data.frame(item=c("cov_d1","cov_d0","cov_d1_d0_diff"),
                          point=c(cov_d1,cov_d0,cov_d1_d0_diff),
                          sd=c(cov_d1_sd,cov_d0_sd,cov_d1_d0_diff_sd))
  }
  if (Y=="completion") {
    results <- data.frame(item=c("cov_d1","cov_DG","cov_d1_DG_diff"),
                          point=c(cov_d1,cov_DG,cov_d1_DG_diff),
                          sd=c(cov_d1_sd,cov_DG_sd,cov_d1_DG_diff_sd))
  }
  
  return(results)
}

#### run the analysis in each MI sample 
start <- Sys.time()

MI_results <- list()

covariates <- c("parental_income_log","gender","medu","fedu","parental_presence",
                "n_sib","urban","edu_exp","AFQT","age","friend_edu_exp","rotter_score","rosenberg_irt_score",
                "sig_other_exp1","sig_other_exp2","sig_other_exp3","sig_other_exp4","foreign_lang",
                "SMSA1","SMSA2","SMSA3","SMSA4","mother_seperate","college_prep",
                "school_satis1","school_satis2","school_satis3","fm_foreign_born",
                "region1","region2","region3","region4","m_work","race1","race2","race3")

set.seed(1)
for (i in 1:10) {
  data_ge <- readRDS(paste("/Users/Ang/Desktop/Research/Counterfactual covariances/Data/imputed data/data_imputed_ge",i,".rds", sep = ""))
  data_mare <- readRDS(paste("/Users/Ang/Desktop/Research/Counterfactual covariances/Data/imputed data/data_imputed_mare",i,".rds", sep = ""))
  
  MI_results_GE_descriptive <- concov(Y="adult_income_log",D="completion",G="parental_income_log",Z="parental_income_log",data=data_ge,algorithm="ranger",t=0.025)
  MI_results_GE_causal <- concov(Y="adult_income_log",D="completion",G="parental_income_log",Z=covariates,data=data_ge,algorithm="ranger",t=0.025)
  
  MI_results_Mare_descriptive <- concov(Y="completion",D="attendance",G="parental_income_log",Z="parental_income_log",data=data_mare,algorithm="ranger",t=0.025)
  MI_results_Mare_causal <- concov(Y="completion",D="attendance",G="parental_income_log",Z=covariates,data=data_mare,algorithm="ranger",t=0.025)

  MI_results_GE_descriptive[,1] <- c("GE_descriptive, cov_d1","GE_descriptive, cov_d0","GE_descriptive, cov_d1_d0_diff")
  MI_results_GE_causal[,1] <- c("GE_causal, cov_d1","GE_causal, cov_d0","GE_causal, cov_d1_d0_diff")
  MI_results_Mare_descriptive[,1] <- c("Mare_descriptive, cov_d1","Mare_descriptive, cov_DG","Mare_descriptive, cov_d1_DG_diff")
  MI_results_Mare_causal[,1] <- c("Mare_causal, cov_d1","Mare_causal, cov_DG","Mare_causal, cov_d1_DG_diff")
  
  MI_results[[i]] <- rbind(MI_results_GE_descriptive, MI_results_GE_causal, MI_results_Mare_descriptive, MI_results_Mare_causal)
  }

end <- Sys.time()
end-start

#### pooling MI results (Rubin, 1987, p76-7)
m <- 10

# averages
averages <- rep(0, length(MI_results[[1]][,2]))
for (i in 1:m) {
  averages <- (averages + MI_results[[i]][,2])
}
averages <- averages/m

# se
# se within is the average of se's in MI samples
var_within <- rep(0, length(MI_results[[1]][,3]))
for (i in 1:m) {
  var_within <- (var_within + MI_results[[i]][,3]^2)   # the se given by caudec should be squared to get estimates' variances
}
var_within <- var_within/m
# se between
var_between <- rep(0, length(MI_results[[1]][,2]))
for (i in 1:m) {
  var_between <- var_between + (averages-MI_results[[i]][,2])^2
}
var_between <- var_between/(m-1)
var_total <- var_within+(1+1/m)*var_between

# degrees of freedom
dof <- (m-1)*(1 + var_within/( (1+1/m)*var_between) )^2

qt(0.975, dof)   
# qt(0.975, (100-1)*(1 + var_within/( (1+1/100)*var_between) )^2)

# confidence intervals
CI_low <- averages - qt(0.975, dof)*sqrt(var_total)
CI_upp <- averages + qt(0.975, dof)*sqrt(var_total)

# p values
pvalues <- 1-abs(pt(averages/sqrt(var_total), df=dof)-0.5)*2

results_df <- data.frame(
  item=c("GE_descriptive, cov_d1","GE_descriptive, cov_d0","GE_descriptive, cov_d1_d0_diff",
    "GE_causal, cov_d1","GE_causal, cov_d0","GE_causal, cov_d1_d0_diff",
    "Mare_descriptive, cov_d1","Mare_descriptive, cov_DG","Mare_descriptive, cov_d1_DG_diff",
    "Mare_causal, cov_d1","Mare_causal, cov_DG","Mare_causal, cov_d1_DG_diff"),
  point=averages,
  CI_low=CI_low,
  CI_upp=CI_upp,
  pvalues=pvalues)

results_df


