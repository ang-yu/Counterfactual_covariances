

rm(list=ls(all=TRUE))

library("caret")
library("nnet")
library("xtable")

options(scipen=999)

#### First get a function the estimates the counterfactual covariances

concov <- function(Y,D,G,Z,data,algorithm="ranger") {
  # estimate the nuisance functions using cross-fitting
  sample1 <- sample(nrow(data), floor(nrow(data)/2), replace=F)
  sample2 <- setdiff(1:nrow(data), sample1)
  
  YgivenDZ.Pred_D0 <- YgivenDZ.Pred_D1 <- DgivenZ.Pred <- rep(NA, nrow(data))
  
  if (Y=="adult_income") {
    if (algorithm=="nnet") {
      message <- utils::capture.output( YgivenDZ.Model.sample1 <- caret::train(stats::as.formula(paste(Y, paste(D,paste(Z,collapse="+"),sep="+"), sep="~")), data=data[sample1,], method="nnet",
                                                                               preProc=c("center","scale"), trControl=caret::trainControl(method="none"), linout=TRUE,
                                                                               tuneGrid=expand.grid(size=2,decay=0.02)) )
      message <- utils::capture.output( YgivenDZ.Model.sample2 <- caret::train(stats::as.formula(paste(Y, paste(D,paste(Z,collapse="+"),sep="+"), sep="~")), data=data[sample2,], method="nnet",
                                                                               preProc=c("center","scale"), trControl=caret::trainControl(method="none"), linout=TRUE,
                                                                               tuneGrid=expand.grid(size=2,decay=0.02)) )
    }
    if (algorithm=="ranger") {
      message <- utils::capture.output( YgivenDZ.Model.sample1 <- caret::train(stats::as.formula(paste(Y, paste(D,paste(Z,collapse="+"),sep="+"), sep="~")), data=data[sample1,], method="ranger",
                                                                               trControl=caret::trainControl(method="cv"),
                                                                               tuneGrid=expand.grid(mtry=floor(sqrt(length(Z))),splitrule="variance",min.node.size=c(5,10,100,200))) )
      message <- utils::capture.output( YgivenDZ.Model.sample2 <- caret::train(stats::as.formula(paste(Y, paste(D,paste(Z,collapse="+"),sep="+"), sep="~")), data=data[sample2,], method="ranger",
                                                                               trControl=caret::trainControl(method="cv"),
                                                                               tuneGrid=expand.grid(mtry=floor(sqrt(length(Z))),splitrule="variance",min.node.size=c(5,10,100,200))) )
    }
    pred_data0 <- data
    pred_data0[,colnames(pred_data0)%in%D] <- 0
    YgivenDZ.Pred_D0[sample1] <- stats::predict(YgivenDZ.Model.sample2, newdata = pred_data0[sample1,])
    YgivenDZ.Pred_D0[sample2] <- stats::predict(YgivenDZ.Model.sample1, newdata = pred_data0[sample2,])
    pred_data1 <- data
    pred_data1[,colnames(pred_data1)%in%D] <- 1
    YgivenDZ.Pred_D1[sample1] <- stats::predict(YgivenDZ.Model.sample2, newdata = pred_data1[sample1,])
    YgivenDZ.Pred_D1[sample2] <- stats::predict(YgivenDZ.Model.sample1, newdata = pred_data1[sample2,])
  }

  if (Y=="completion") {
    data[,Y] <- as.factor(data[,Y])
    levels(data[,Y]) <- c("Y0","Y1")  # necessary for caret implementation of ranger
    
    if (algorithm=="nnet") {
      message <- utils::capture.output( YgivenDZ.Model.sample1 <- caret::train(stats::as.formula(paste(Y, paste(D,paste(Z,collapse="+"),sep="+"), sep="~")), data=data[sample1,], method="nnet",
                                                                              preProc=c("center","scale"), trControl=caret::trainControl(method="none"), linout=FALSE,
                                                                              tuneGrid=expand.grid(size=2,decay=0.02)) )
      message <- utils::capture.output( YgivenDZ.Model.sample2 <- caret::train(stats::as.formula(paste(Y, paste(D,paste(Z,collapse="+"),sep="+"), sep="~")), data=data[sample2,], method="nnet",
                                                                              preProc=c("center","scale"), trControl=caret::trainControl(method="none"), linout=FALSE,
                                                                              tuneGrid=expand.grid(size=2,decay=0.02)) )
    }
    if (algorithm=="ranger") {
      message <- utils::capture.output( YgivenDZ.Model.sample1 <- caret::train(stats::as.formula(paste(Y, paste(D,paste(Z,collapse="+"),sep="+"), sep="~")), data=data[sample1,], method="ranger",
                                                                              trControl=caret::trainControl(method="cv", classProbs=TRUE),
                                                                              tuneGrid=expand.grid(mtry=floor(sqrt(length(Z))),splitrule="gini",min.node.size=c(1,10,100,200))) )
      message <- utils::capture.output( YgivenDZ.Model.sample2 <- caret::train(stats::as.formula(paste(Y, paste(D,paste(Z,collapse="+"),sep="+"), sep="~")), data=data[sample2,], method="ranger",
                                                                              trControl=caret::trainControl(method="cv", classProbs=TRUE),
                                                                              tuneGrid=expand.grid(mtry=floor(sqrt(length(Z))),splitrule="gini",min.node.size=c(1,10,100,200))) )
    }
    pred_data0 <- data
    pred_data0[,colnames(pred_data0)%in%D] <- 0
    YgivenDZ.Pred_D0[sample1] <- stats::predict(YgivenDZ.Model.sample2, newdata = pred_data0[sample1,], type="prob")[,2]
    YgivenDZ.Pred_D0[sample2] <- stats::predict(YgivenDZ.Model.sample1, newdata = pred_data0[sample2,], type="prob")[,2]
    pred_data1 <- data
    pred_data1[,colnames(pred_data1)%in%D] <- 1
    YgivenDZ.Pred_D1[sample1] <- stats::predict(YgivenDZ.Model.sample2, newdata = pred_data1[sample1,], type="prob")[,2]
    YgivenDZ.Pred_D1[sample2] <- stats::predict(YgivenDZ.Model.sample1, newdata = pred_data1[sample2,], type="prob")[,2]
    
    data[,Y] <- as.numeric(data[,Y])-1
  }

  
  data[,D] <- as.factor(data[,D])
  levels(data[,D]) <- c("D0","D1")  # necessary for caret implementation of ranger
  
  if (algorithm=="nnet") {
    message <- utils::capture.output( DgivenZ.Model.sample1 <- caret::train(stats::as.formula(paste(D, paste(Z,collapse="+"), sep="~")), data=data[sample1,], method="nnet",
                                                                            preProc=c("center","scale"), trControl=caret::trainControl(method="none"), linout=FALSE,
                                                                            tuneGrid=expand.grid(size=2,decay=0.02)) )
    message <- utils::capture.output( DgivenZ.Model.sample2 <- caret::train(stats::as.formula(paste(D, paste(Z,collapse="+"), sep="~")), data=data[sample2,], method="nnet",
                                                                            preProc=c("center","scale"), trControl=caret::trainControl(method="none"), linout=FALSE,
                                                                            tuneGrid=expand.grid(size=2,decay=0.02)) )
  }
  if (algorithm=="ranger") {
    message <- utils::capture.output( DgivenZ.Model.sample1 <- caret::train(stats::as.formula(paste(D, paste(Z,collapse="+"), sep="~")), data=data[sample1,], method="ranger",
                                                                            trControl=caret::trainControl(method="cv", classProbs=TRUE),
                                                                            tuneGrid=expand.grid(mtry=floor(sqrt(length(Z))),splitrule="gini",min.node.size=c(1,10,100,200))) )
    message <- utils::capture.output( DgivenZ.Model.sample2 <- caret::train(stats::as.formula(paste(D, paste(Z,collapse="+"), sep="~")), data=data[sample2,], method="ranger",
                                                                            trControl=caret::trainControl(method="cv", classProbs=TRUE),
                                                                            tuneGrid=expand.grid(mtry=floor(sqrt(length(Z))),splitrule="gini",min.node.size=c(1,10,100,200))) )
  }
  DgivenZ.Pred[sample1] <- stats::predict(DgivenZ.Model.sample2, newdata=data[sample1,], type="prob")[,2]
  DgivenZ.Pred[sample2] <- stats::predict(DgivenZ.Model.sample1, newdata=data[sample2,], type="prob")[,2]
  
  DgivenZ.Pred[DgivenZ.Pred<=quantile(DgivenZ.Pred, probs=0.025)] <- quantile(DgivenZ.Pred, probs=0.025)
  DgivenZ.Pred[DgivenZ.Pred>=quantile(DgivenZ.Pred, probs=1-0.025)] <- quantile(DgivenZ.Pred, probs=1-0.025)
  
  data[,D] <- as.numeric(data[,D])-1
  
  E_YgivenDZ.Pred_D0 <- E_YgivenDZ.Pred_D1 <- E_G <- E_D <- rep(NA, nrow(data))
  E_YgivenDZ.Pred_D0[sample1] <- mean(stats::predict(YgivenDZ.Model.sample2, newdata = pred_data0[sample2,]))
  E_YgivenDZ.Pred_D0[sample2] <- mean(stats::predict(YgivenDZ.Model.sample1, newdata = pred_data0[sample1,]))
  E_YgivenDZ.Pred_D1[sample1] <- mean(stats::predict(YgivenDZ.Model.sample2, newdata = pred_data1[sample2,]))
  E_YgivenDZ.Pred_D1[sample2] <- mean(stats::predict(YgivenDZ.Model.sample1, newdata = pred_data1[sample1,]))
  E_G[sample1] <- mean(data[sample2,G])
  E_G[sample2] <- mean(data[sample1,G])
  E_D[sample1] <- mean(data[sample2,D])
  E_D[sample2] <- mean(data[sample1,D])
  
  # decentered EIFs
  eif_d1 <- ( (data[,D]/DgivenZ.Pred)*(data[,Y]-YgivenDZ.Pred_D1) + YgivenDZ.Pred_D1-E_YgivenDZ.Pred_D1 )*( data[,G]-E_G )
  eif_d0 <- ( ((1-data[,D])/(1-DgivenZ.Pred))*(data[,Y]-YgivenDZ.Pred_D0) + YgivenDZ.Pred_D0-E_YgivenDZ.Pred_D0 )*( data[,G]-E_G )
  eif_DG <- data[,D]*data[,G]-data[,D]*E_G+E_D*E_G-data[,G]*E_D    # For the Mare thesis
  
  ## some descriptive checks
  cov(YgivenDZ.Pred_D1, data[,G])/var(data[,G])  
  cov(YgivenDZ.Pred_D0, data[,G])/var(data[,G])  
  
  cov(predict(lm( adult_income~parental_income*completion, data), newdata=pred_data1), data[,G])/var(data[,G])  
  cov(predict(lm( adult_income~parental_income*completion, data), newdata=pred_data0), data[,G])/var(data[,G])  
  
  lm(data[data[,D]==1,Y] ~ data[data[,D]==1,G])
  lm(data[data[,D]==0,Y] ~ data[data[,D]==0,G])
  summary(lm(data[,Y] ~ data[,G]*data[,D]))
  
  cor.test(predict(lm( adult_income~parental_income*completion, data), newdata=pred_data1), YgivenDZ.Pred_D1)
  cor.test(predict(lm( adult_income~parental_income*completion, data), newdata=pred_data0), YgivenDZ.Pred_D0)
  ##
  
  cov_d1 <-  mean(eif_d1)      
  cov_d0 <-  mean(eif_d0)      
  cov_d1_d0_diff <- cov_d1-cov_d0
  cov_DG <- mean(eif_DG)  # For the Mare thesis     # For comparison, this is the un-cross-fitted version: mean(data[,D]*data[,G])-mean(data[,D])*mean(data[,G])
  cov_d1_DG_diff <- cov_d1-cov_DG  # For the Mare thesis
  
  cov_d1_sd <- sqrt( (1/nrow(data)) * mean((eif_d1-cov_d1)^2) )
  cov_d0_sd <- sqrt( (1/nrow(data)) * mean((eif_d0-cov_d0)^2) )
  cov_d1_d0_diff_sd <- sqrt((1/nrow(data)) * mean((eif_d1-eif_d0-cov_d1_d0_diff)^2)) 
  cov_DG_sd <- sqrt( (1/nrow(data)) * mean((eif_DG-cov_DG)^2) )
  cov_d1_DG_diff_sd <- sqrt((1/nrow(data)) * mean((eif_d1-eif_DG-cov_d1_DG_diff)^2)) 
  
  results <- data.frame(item=c("cov_d1","cov_d0","cov_d1_d0_diff","cov_DG","cov_d1_DG_diff"),
                        point=c(cov_d1,cov_d0,cov_d1_d0_diff,cov_DG,cov_d1_DG_diff),
                        sd=c(cov_d1_sd,cov_d0_sd,cov_d1_d0_diff_sd,cov_DG_sd,cov_d1_DG_diff_sd))
  
  return(results)
}

#### list of covariates
covariates <- c("parental_income","gender","medu","fedu","parental_presence",
                "n_sib","urban","edu_exp","AFQT","age","friend_edu_exp","rotter_score","rosenberg_irt_score",
                "sig_other_exp1","sig_other_exp2","sig_other_exp3","sig_other_exp4","foreign_lang",
                "SMSA1","SMSA2","SMSA3","SMSA4","mother_seperate","college_prep",
                "school_satis1","school_satis2","school_satis3","fm_foreign_born",
                "region1","region2","region3","region4","m_work","race1","race2","race3")

#### run the analysis in each MI sample 
start <- Sys.time()

MI_results_GE <- MI_results_Mare <- list()

set.seed(1)
for (i in 1:10) {
  
  data <- readRDS(paste("/Users/Ang/Desktop/Research/Counterfactual covariances/Data/imputed data/data_imputed",i,".rds", sep = ""))
  
  # convert all factor variables to numeric 
  data$gender <- as.numeric(data$gender)-1
  
  data$parental_presence <- as.numeric(data$parental_presence)-1
  
  data$n_sib <- as.numeric(data$n_sib)-1
  
  data$urban <- as.numeric(data$urban)-1
  
  data$edu_exp <- as.numeric(data$edu_exp)-2
  data$edu_exp[data$edu_exp==-1] <- 0
  
  data$age <- as.numeric(data$age)-1
  
  data$friend_edu_exp <- as.numeric(data$friend_edu_exp)-2
  data$friend_edu_exp[data$friend_edu_exp==-1] <- 0
  
  data$sig_other_exp1 <- NA
  data$sig_other_exp1[data$sig_other_expec==1 & !is.na(data$sig_other_expec)] <- 1
  data$sig_other_exp1[data$sig_other_expec!=1 & !is.na(data$sig_other_expec)] <- 0
  data$sig_other_exp2 <- NA
  data$sig_other_exp2[data$sig_other_expec==2 & !is.na(data$sig_other_expec)] <- 1
  data$sig_other_exp2[data$sig_other_expec!=2 & !is.na(data$sig_other_expec)] <- 0
  data$sig_other_exp3 <- NA
  data$sig_other_exp3[data$sig_other_expec==3 & !is.na(data$sig_other_expec)] <- 1
  data$sig_other_exp3[data$sig_other_expec!=3 & !is.na(data$sig_other_expec)] <- 0
  data$sig_other_exp4 <- NA
  data$sig_other_exp4[data$sig_other_expec==4 & !is.na(data$sig_other_expec)] <- 1
  data$sig_other_exp4[data$sig_other_expec!=4 & !is.na(data$sig_other_expec)] <- 0
  
  data$foreign_lang <- as.numeric(data$foreign_lang)-1
  
  data$SMSA1 <- NA
  data$SMSA1[data$SMSA==0 & !is.na(data$SMSA)] <- 1
  data$SMSA1[data$SMSA!=0 & !is.na(data$SMSA)] <- 0
  data$SMSA2 <- NA
  data$SMSA2[data$SMSA==1 & !is.na(data$SMSA)] <- 1
  data$SMSA2[data$SMSA!=1 & !is.na(data$SMSA)] <- 0
  data$SMSA3 <- NA
  data$SMSA3[data$SMSA==2 & !is.na(data$SMSA)] <- 1
  data$SMSA3[data$SMSA!=2 & !is.na(data$SMSA)] <- 0
  data$SMSA4 <- NA
  data$SMSA4[data$SMSA==3 & !is.na(data$SMSA)] <- 1
  data$SMSA4[data$SMSA!=3 & !is.na(data$SMSA)] <- 0
  
  data$foreign_lang <- as.numeric(data$foreign_lang)-1
  
  data$mother_seperate <- as.numeric(data$mother_seperate)-1
  
  data$college_prep <- as.numeric(data$college_prep)-1
  
  data$school_satis1 <- NA
  data$school_satis1[(data$school_satisfaction==1 | data$school_satisfaction==2) & !is.na(data$school_satisfaction)] <- 1
  data$school_satis1[data$school_satisfaction!=1 & data$school_satisfaction!=2 & !is.na(data$school_satisfaction)] <- 0
  data$school_satis2 <- NA
  data$school_satis2[data$school_satisfaction==3 & !is.na(data$school_satisfaction)] <- 1
  data$school_satis2[data$school_satisfaction!=3 & !is.na(data$school_satisfaction)] <- 0
  data$school_satis3 <- NA
  data$school_satis3[data$school_satisfaction==4 & !is.na(data$school_satisfaction)] <- 1
  data$school_satis3[data$school_satisfaction!=4 & !is.na(data$school_satisfaction)] <- 0
  
  data$fm_foreign_born <- NA
  data$fm_foreign_born[(data$f_foreign_born==2 | data$m_foreign_born==2) & !is.na(data$f_foreign_born) & !is.na(data$m_foreign_born)] <- 1
  data$fm_foreign_born[(data$f_foreign_born==1 | data$m_foreign_born==1) & !is.na(data$f_foreign_born) & !is.na(data$m_foreign_born)] <- 0
  
  data$region1 <- NA
  data$region1[data$region==1 & !is.na(data$region)] <- 1
  data$region1[data$region!=1 & !is.na(data$region)] <- 0
  data$region2 <- NA
  data$region2[data$region==2 & !is.na(data$region)] <- 1
  data$region2[data$region!=2 & !is.na(data$region)] <- 0
  data$region3 <- NA
  data$region3[data$region==3 & !is.na(data$region)] <- 1
  data$region3[data$region!=3 & !is.na(data$region)] <- 0
  data$region4 <- NA
  data$region4[data$region==4 & !is.na(data$region)] <- 1
  data$region4[data$region!=4 & !is.na(data$region)] <- 0
  
  data$m_work <- as.numeric(data$m_work)-1
  
  data$race1 <- NA
  data$race1[data$race=="Other" & !is.na(data$race)] <- 1
  data$race1[data$race!="Other" & !is.na(data$race)] <- 0
  data$race2 <- NA
  data$race2[data$race=="Black" & !is.na(data$race)] <- 1
  data$race2[data$race!="Black" & !is.na(data$race)] <- 0
  data$race3 <- NA
  data$race3[data$race=="Hispanic" & !is.na(data$race)] <- 1
  data$race3[data$race!="Hispanic" & !is.na(data$race)] <- 0
  
  data$attendance <- as.numeric(data$attendance)-1
  data$completion <- as.numeric(data$completion)-1
  

  #### Analysis
  
  MI_results_GE_descriptive[[i]] <- concov(Y="adult_income",D="completion",G="parental_income",Z="parental_income",data=data,algorithm="ranger")
  MI_results_GE_causal[[i]] <- concov(Y="adult_income",D="completion",G="parental_income",Z=covariates,data=data,algorithm="ranger")
  
  MI_results_Mare_descriptive[[i]] <- concov(Y="completion",D="attendance",G="parental_income",Z="parental_income",data=data,algorithm="ranger")
  MI_results_Mare_causal[[i]] <- concov(Y="completion",D="attendance",G="parental_income",Z=covariates,data=data,algorithm="ranger")
  
}

end <- Sys.time()
end-start

# save(MI_results, file="MI_results_nnet.RData")
# save(MI_results, file="MI_results_ranger.RData")
save(MI_results, file="MI_results_ranger_weighted.RData")

# load("MI_results_nnet.RData")
load("MI_results_ranger_weighted.RData")

#### pooling MI results (Rubin, 1987, p76-7)
m <- 10

# averages
averages <- rep(0, length(MI_results[[1]][[1]]))
for (i in 1:m) {
  averages <- (averages + MI_results[[i]][[1]])
}
averages <- averages/m

# se
# se within is the average of se's in MI samples
var_within <- rep(0, length(MI_results[[1]][[1]]))
for (i in 1:m) {
  var_within <- (var_within + MI_results[[i]][[2]]^2)   # the se given by caudec should be squared to get estimates' variances
}
var_within <- var_within/m
# se between
var_between <- rep(0, length(MI_results[[1]][[1]]))
for (i in 1:m) {
  var_between <- var_between + (averages-MI_results[[i]][[1]])^2
}
var_between <- var_between/(m-1)
var_total <- var_within+(1+1/m)*var_between

# degrees of freedom
dof <- (m-1)*(1 + var_within/( (1+1/m)*var_between) )^2

qt(0.975, dof)   
# (100-1)*(1 + var_within/( (1+1/100)*var_between) )^2  # making m=100 will particularly improve the results for prevalence and conditional prevalence
# And that is because var_within/var_between is particularly small for prevalence and conditional prevalence

# confidence intervals
CI_low <- averages - qt(0.975, dof)*sqrt(var_total)
CI_upp <- averages + qt(0.975, dof)*sqrt(var_total)

# p values
pvalues <- 1-abs(pt(averages/sqrt(var_total), df=dof)-0.5)*2


results_df <- as.data.frame(cbind(c(
  "mean(data[,Y][G1_index]*wht[G1_index])",
  "mean(data[,Y][G2_index]*wht[G2_index])",
  "mean(Y0_i[G1_index])",
  "mean(Y0_i[G2_index])",
  "mean(data[,W][G1_index]*wht[G1_index])",
  "mean(data[,W][G2_index]*wht[G2_index])",
  "mean(ATE_i[G1_index])",
  "mean(ATE_i[G2_index])",
  "mean(ATT_i[G1_index])",
  "mean(ATT_i[G2_index])",
  "total",
  "baseline",
  "mean(data[,W][G1_index]*wht[G1_index])-mean(data[,W][G2_index]*wht[G2_index])",
  "mean(ATE_i[G1_index])-mean(ATE_i[G2_index])",
  "mean(ATT_i[G1_index])-mean(ATT_i[G2_index])",
  "total",
  "baseline",
  "prevalence",
  "effect",
  "selection",
  "cond_prevalence",
  "cond_effect",
  "cond_selection",
  "Q_dist"
),
averages,
pvalues))

# View(results_df)
